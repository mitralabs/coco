"""create documents table

Revision ID: e0d8710869c2
Revises: 
Create Date: 2025-03-03 17:06:02.083624

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from pgvector.sqlalchemy import Vector
import logging

# Import utility functions for vector dimension checking
import sys
import os

# Get the parent directory to import from app
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from vector_utils import check_vector_dimensions, EMBEDDING_DIM

# revision identifiers, used by Alembic.
revision: str = "e0d8710869c2"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Setup logger
logger = logging.getLogger(__name__)


def upgrade() -> None:
    # Install pgvector extension if not already installed
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # Create a connection to work with
    connection = op.get_bind()

    # Check if documents table exists
    inspector = sa.inspect(connection)
    table_exists = "documents" in inspector.get_table_names()

    # If the table exists, check vector dimensions
    if table_exists:
        # Using the utility function to check vector dimensions
        need_recreate = check_vector_dimensions(connection, connection, logger)
        if need_recreate:
            # Drop the existing table if dimensions don't match
            logger.info(
                f"Recreating documents table with new dimension: {EMBEDDING_DIM}"
            )
            op.drop_index(op.f("ix_documents_id"), table_name="documents")
            op.drop_table("documents")
            table_exists = False

    # Create the table if it doesn't exist or was dropped due to dimension mismatch
    if not table_exists:
        # ### commands auto generated by Alembic - please adjust! ###
        op.create_table(
            "documents",
            sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
            sa.Column("text", sa.String(), nullable=False),
            sa.Column("embedding", Vector(dim=EMBEDDING_DIM), nullable=False),
            sa.Column("language", sa.String(), nullable=False),
            sa.Column("filename", sa.String(), nullable=False),
            sa.Column("chunk_index", sa.Integer(), nullable=False),
            sa.Column("total_chunks", sa.Integer(), nullable=False),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("text"),
        )
        op.create_index(op.f("ix_documents_id"), "documents", ["id"], unique=False)
        logger.info(
            f"Created documents table with embedding dimension: {EMBEDDING_DIM}"
        )
        # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_documents_id"), table_name="documents")
    op.drop_table("documents")
    # ### end Alembic commands ###

    # Drop the pgvector extension
    op.execute("DROP EXTENSION IF EXISTS vector")
